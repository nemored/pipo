/* Configuration file for UnrealIRCd 5
 *
 * Simply copy this file to your conf/ directory, call it
 * 'unrealircd.conf' and walk through it line by line (edit it!)
 *
 * Important: All lines, except { and } end with an ;
 * This is very important, if you miss a ; somewhere then the
 * configuration file parser will complain and the file will not
 * be processed correctly!
 * If this is your first experience with an UnrealIRCd configuration
 * file then we really recommend you to read a little about the syntax,
 * this only takes a few minutes and will help you a lot:
 * https://www.unrealircd.org/docs/Configuration#Configuration_file_syntax
 *
 * UnrealIRCd 5 documentation (very extensive!):
 * https://www.unrealircd.org/docs/UnrealIRCd_5_documentation
 *
 * Frequently Asked Questions:
 * https://www.unrealircd.org/docs/FAQ
 *
 */

/* This is a comment, all text here is ignored (comment type #1) */
// This is also a comment, this line is ignored (comment type #2)
# This is also a comment, again this line is ignored (comment type #3)

/* UnrealIRCd makes heavy use of modules. Modules allow you to completely
 * customize the featureset you wish to enable in UnrealIRCd.
 * See: https://www.unrealircd.org/docs/Modules
 *
 * By using the include below we instruct the IRCd to read the file
 * 'modules.default.conf' which will load more than 150 modules
 * shipped with UnrealIRCd. In other words: this will simply load
 * all the available features in UnrealIRCd.
 * If you are setting up UnrealIRCd for the first time we suggest you
 * use this. Then, when everything is up and running you can come
 * back later to customize the list (if you wish).
 */
include "modules.default.conf";

/* Now let's include some other files as well:
 * - help/help.conf for our on-IRC /HELPOP system
 * - badwords.conf for channel and user mode +G
 * - spamfilter.conf as an example for spamfilter usage
 *   (commented out)
 * - operclass.default.conf contains some good operclasses which
 *   you can use in your oper blocks.
 */
include "help/help.conf";
include "badwords.conf";
//include "spamfilter.conf";
include "operclass.default.conf";

/* This is the me { } block which basically says who we are.
 * It defines our server name, some information line and an unique "sid".
 * The server id (sid) must start with a digit followed by two digits or
 * letters. The sid must be unique for your IRC network (each server should
 * have it's own sid).
 */
me {
	name "ircd.local";
	info "EIEIO Local Dev IRCd";
	sid "001";
}

/* The admin { } block defines what users will see if they type /ADMIN.
 * It normally contains information on how to contact the administrator.
 */
admin {
	"John Doe";
	"john";
	"email@example.org";
}

/* Clients and servers are put in class { } blocks, we define them here.
 * Class blocks consist of the following items:
 * - pingfreq: how often to ping a user / server (in seconds)
 * - connfreq: how often we try to connect to this server (in seconds)
 * - sendq: the maximum queue size for a connection
 * - recvq: maximum receive queue from a connection (flood control)
 */

/* Client class with good defaults */
class clients
{
	pingfreq 90;
	maxclients 1000;
	sendq 200k;
	recvq 8000;
}

/* Special class for IRCOps with higher limits */
class opers
{
	pingfreq 90;
	maxclients 50;
	sendq 1M;
	recvq 8000;
}

/* Server class with good defaults */
class servers
{
	pingfreq 60;
	connfreq 15; /* try to connect every 15 seconds */
	maxclients 10; /* max servers */
	sendq 20M;
}

/* Allow blocks define which clients may connect to this server.
 * This allows you to add a server password or restrict the server to
 * specific IP's only. You also configure the maximum connections
 * allowed per IP here.
 * See also: https://www.unrealircd.org/docs/Allow_block
 */

/* Allow everyone in, but only 3 connections per IP */
allow {
	ip *@*;
	class clients;
	maxperip 3;
}

/* Standard IRC port 6667 */
listen {
	ip *;
	port 6667;
}

/* SSL */
listen {
        ip *;
        port 6697;
        options { tls; };
}

/* NOTE: If you are on an IRCd shell with multiple IP's and you use
 *       the above listen { } blocks then you will likely get an
 *       'Address already in use' error and the ircd won't start.
 *       This means you MUST bind to a specific IP instead of '*' like:
 *       listen { ip 1.2.3.4; port 6667; }
 *       Of course, replace the IP with the IP that was assigned to you.
 */

/* The log block defines what should be logged and to what file.
 * See also https://www.unrealircd.org/docs/Log_block
 */

/* This is a good default, it logs everything */
# log "ircd.log" {
# 	flags {
# 		oper;
# 		connects;
# 		server-connects;
# 		kills;
# 		errors;
# 		sadmin-commands;
# 		chg-commands;
# 		oper-override;
# 		tkl;
# 		spamfilter;
# 	}
# }

/* With "aliases" you can create an alias like /SOMETHING to send a message to
 * some user or bot. They are usually used for services.
 *
 * We have a number of pre-set alias files, check out the alias/ directory.
 * As an example, here we include all aliases used for anope services.
 */
include "aliases/anope.conf";

/* Network configuration */
set {
        network-name "LocalDevNET";
        default-server "ircd.local";
        help-channel "#help";

        /* This configuration is checked into VC, so these keys
         * shouldn't be considered secret.
         */
        cloak-keys {
                "UY934zgpKZcHpWvkr9sCaj6gB8rzRGF4JbUPRqKqtraaAuoxs6";
                "DeHLqv3zPNeeojDZHh9GoXDab3BJVUaCL32AkdWkfDP3n32utV";
                "bFZLWnji78kcK6CXLiebsAwZMgLFKBd6agaQWam4unCqUnfc6b";
        }
}

/* Server specific configuration */

set {
	kline-address "email@example.com"; /* e-mail or URL shown when a user is banned */
	modes-on-connect "+ixw"; /* when users connect, they will get these user modes */
	modes-on-oper "+xws"; /* when someone becomes IRCOp they'll get these modes */
	modes-on-join "+nt"; /* default channel modes when a new channel is created */
	oper-auto-join "#opers"; /* IRCOps are auto-joined to this channel */
	options {
		hide-ulines; /* hide U-lines in /MAP and /LINKS */
		show-connect-info; /* show "looking up your hostname" messages on connect */
	}

	maxchannelsperuser 10; /* maximum number of channels a user may /JOIN */

	/* The minimum time a user must be connected before being allowed to
	 * use a QUIT message. This will hopefully help stop spam.
	 */
	anti-spam-quit-message-time 10s;

	/* Or simply set a static quit, meaning any /QUIT reason is ignored */
	/* static-quit "Client quit";	*/

	/* static-part does the same for /PART */
	/* static-part yes; */

	/* Flood protection */
	anti-flood {
		nick-flood 3:60;	/* 3 nick changes per 60 seconds (the default) */
		connect-flood 3:60; /* 3 connection attempts per 60 seconds (the default) */
		away-flood 4:120;	/* 4 times per 2 minutes you may use /AWAY (default) */
	}

	/* Settings for spam filter */
	spamfilter {
		ban-time 1d; /* default duration of a *LINE ban set by spamfilter */
		ban-reason "Spam/Advertising"; /* default reason */
		virus-help-channel "#help"; /* channel to use for 'viruschan' action */
		/* except "#help"; channel to exempt from Spamfilter */
	}

	/* Restrict certain commands.
	 * See https://www.unrealircd.org/docs/Set_block#set::restrict-commands
	 */
	restrict-commands {
		list {
			connect-delay 60;
			exempt-identified yes;
			exempt-reputation-score 24;
		}
		invite {
			connect-delay 120;
			exempt-identified yes;
			exempt-reputation-score 24;
		}
		/* In addition to the ability to restrict any command,
		 * such as shown above. There are also 4 special types
		 * that you can restrict. These are "private-message",
		 * "private-notice", "channel-message" and "channel-notice".
		 * They are commented out (disabled) in this example:
		 */
		//private-message {
		//	connect-delay 10;
		//}
		//private-notice {
		//	connect-delay 10;
		//}
	}
}

/*
 * The following will configure connection throttling of "unknown users".
 *
 * When UnrealIRCd detects a high number of users connecting from IP addresses
 * that have not been seen before, then connections from new IP's are rejected
 * above the set rate. For example at 10:60 only 10 users per minute can connect
 * that have not been seen before. Known IP addresses can always get in,
 * regardless of the set rate. Same for users who login using SASL.
 *
 * See also https://www.unrealircd.org/docs/Connthrottle for details.
 * Or just keep reading the default configuration settings below:
 */

set {
	connthrottle {
		/* First we must configure what we call "known users".
		 * By default these are users on IP addresses that have
		 * a score of 24 or higher. A score of 24 means that the
		 * IP was connected to this network for at least 2 hours
		 * in the past month (or minimum 1 hour if registered).
		 * The sasl-bypass option is another setting. It means
		 * that users who authenticate to services via SASL
		 * are considered known users as well.
		 * Users in the "known-users" group (either by reputation
		 * or by SASL) are always allowed in by this module.
		 */
		known-users {
			minimum-reputation-score 24;
			sasl-bypass yes;
		}

		/* New users are all users that do not belong in the
		 * known-users group. They are considered "new" and in
		 * case of a high number of such new users connecting
		 * they are subject to connection rate limiting.
		 * By default the rate is 20 new local users per minute
		 * and 30 new global users per minute.
		 */
		new-users {
			local-throttle 20:60;
			global-throttle 30:60;
		}

		/* This configures when this module will NOT be active.
		 * The default settings will disable the module when:
		 * - The reputation module has been running for less than
		 *   a week. If running less than 1 week then there is
		 *   insufficient data to consider who is a "known user".
		 * - The server has just been booted up (first 3 minutes).
		 */
		disabled-when {
			reputation-gathering 1w;
			start-delay 3m;
		}
	}
}

/* Finally, you may wish to have a MOTD (Message of the Day), this can be
 * done by creating an 'ircd.motd' text file in your conf/ directory.
 * This file will be shown to your users on connect.
 * For more information see https://www.unrealircd.org/docs/MOTD_and_Rules
 */

/*
 * Problems or need more help?
 * 1) https://www.unrealircd.org/docs/UnrealIRCd_4_documentation
 * 2) https://www.unrealircd.org/docs/FAQ <- answers 80% of your questions!
 * 3) If you are still having problems then you can get support:
 *    - Forums: https://forums.unrealircd.org/
 *    - IRC: irc.unrealircd.org (SSL on port 6697) / #unreal-support
 *    Note that we require you to read the documentation and FAQ first!
 */
